// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package repository

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson32ceb8acDecodeYuiPluginRepository(in *jlexer.Lexer, out *ResponseStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ApiVersion":
			out.ApiVersion = int(in.Int())
		case "Plugins":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Plugins = make(map[string]Plugin)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 Plugin
					easyjson32ceb8acDecodeYuiPluginRepository1(in, &v1)
					(out.Plugins)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson32ceb8acEncodeYuiPluginRepository(out *jwriter.Writer, in ResponseStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ApiVersion\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ApiVersion))
	}
	{
		const prefix string = ",\"Plugins\":"
		out.RawString(prefix)
		if in.Plugins == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Plugins {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				easyjson32ceb8acEncodeYuiPluginRepository1(out, v2Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson32ceb8acEncodeYuiPluginRepository(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson32ceb8acEncodeYuiPluginRepository(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson32ceb8acDecodeYuiPluginRepository(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson32ceb8acDecodeYuiPluginRepository(l, v)
}
func easyjson32ceb8acDecodeYuiPluginRepository1(in *jlexer.Lexer, out *Plugin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]string, 0, 4)
					} else {
						out.Permissions = []string{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Permissions = append(out.Permissions, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DownloadUrl":
			out.DownloadUrl = string(in.String())
		case "PluginName":
			out.PluginName = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]string, 0, 4)
					} else {
						out.Dependencies = []string{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Dependencies = append(out.Dependencies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Author":
			out.Author = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "Version":
			out.Version = int(in.Int())
		case "Sha256":
			out.Sha256 = string(in.String())
		case "Sign":
			out.Sign = bool(in.Bool())
		case "SignInfo":
			out.SignInfo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson32ceb8acEncodeYuiPluginRepository1(out *jwriter.Writer, in Plugin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Permissions\":"
		out.RawString(prefix[1:])
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Permissions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DownloadUrl\":"
		out.RawString(prefix)
		out.String(string(in.DownloadUrl))
	}
	{
		const prefix string = ",\"PluginName\":"
		out.RawString(prefix)
		out.String(string(in.PluginName))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Dependencies\":"
		out.RawString(prefix)
		if in.Dependencies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Dependencies {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"Sha256\":"
		out.RawString(prefix)
		out.String(string(in.Sha256))
	}
	{
		const prefix string = ",\"Sign\":"
		out.RawString(prefix)
		out.Bool(bool(in.Sign))
	}
	{
		const prefix string = ",\"SignInfo\":"
		out.RawString(prefix)
		out.String(string(in.SignInfo))
	}
	out.RawByte('}')
}
