package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"os"
	"strings"
)

func main() {
	fs := token.NewFileSet()
	f, err := parser.ParseFile(fs, "./meta.go", nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}
	var data = map[string]struct {
		value string
		micro bool
	}{}
	for _, d := range f.Decls {
		switch v := d.(type) {
		case *ast.GenDecl:

			for _, v1 := range v.Specs {
				if v2, ok := v1.(*ast.ValueSpec); ok {
					for _, id := range v2.Names {
						if strings.TrimSpace(v2.Comment.Text()) != "" {
							//ast.Print(fs, v2.Names[1])
							//fmt.Println(id.Name, id.Obj.Decl)
							value := strings.TrimSpace(v2.Comment.Text())
							data[id.Name] = struct {
								value string
								micro bool
							}{value: value, micro: strings.HasPrefix(value, "ÂÆè")}
						}
					}
				}
			}
		}
	}
	var output bytes.Buffer
	output.WriteString("// Code generated by opq. DO NOT EDIT.\n\n")
	output.WriteString("package meta\nimport \"strings\"\n")
	output.WriteString(`func GetPermissions(permissions Permission) string {
	permissionsStr := []string{}
`)
	for k, v := range data {
		if !v.micro {
			output.WriteString(fmt.Sprintf(`	if permissions&%s != 0 {
		permissionsStr = append(permissionsStr, "%s")
	}
`, k, v.value))
		}

	}
	output.WriteString("return strings.Join(permissionsStr, \"\\n\")\n}\n")
	output.WriteString(`func SumPermissions(permissions...string) Permission {
	var sum Permission = 0
	for _,v:=range permissions {
		switch v {
`)
	for k, _ := range data {
		output.WriteString(fmt.Sprintf(`		case "%s":
			sum |= %s
`, k, k))
	}
	output.WriteString(`		}
	}
	return sum
}`)
	dataBytes, err := format.Source(output.Bytes())
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("meta_generate.go", dataBytes, 0777)
	if err != nil {
		panic(err)
	}
}
