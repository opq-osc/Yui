//go:build tinygo.wasm

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.19.4
// source: proto/opq.proto

package proto

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
	_ "unsafe"
)

const EventPluginAPIVersion = 1

//export event_api_version
func _event_api_version() uint64 {
	return EventPluginAPIVersion
}

var event Event

func RegisterEvent(p Event) {
	event = p
}

//export event_init
func _event_init(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(emptypb.Empty)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.Init(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export event_on_group_msg
func _event_on_group_msg(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(CommonMsg)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.OnGroupMsg(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export event_on_friend_msg
func _event_on_friend_msg(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(CommonMsg)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.OnFriendMsg(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export event_on_private_msg
func _event_on_private_msg(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(CommonMsg)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.OnPrivateMsg(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export event_unload
func _event_unload(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(emptypb.Empty)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.Unload(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export event_on_cron_event
func _event_on_cron_event(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(CronEventReq)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.OnCronEvent(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export event_on_remote_call_event
func _event_on_remote_call_event(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(RemoteCallReq)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := event.OnRemoteCallEvent(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type api struct{}

func NewApi() Api {
	return api{}
}

//go:wasm-module env
//export log
//go:linkname _log
func _log(ptr uint32, size uint32) uint64

func (h api) Log(ctx context.Context, request *LogReq) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export http
//go:linkname _http
func _http(ptr uint32, size uint32) uint64

func (h api) Http(ctx context.Context, request *HttpReq) (*HttpRes, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _http(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(HttpRes)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export send_group_msg
//go:linkname _send_group_msg
func _send_group_msg(ptr uint32, size uint32) uint64

func (h api) SendGroupMsg(ctx context.Context, request *MsgReq) (*SendReply, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _send_group_msg(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(SendReply)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export send_friend_msg
//go:linkname _send_friend_msg
func _send_friend_msg(ptr uint32, size uint32) uint64

func (h api) SendFriendMsg(ctx context.Context, request *MsgReq) (*SendReply, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _send_friend_msg(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(SendReply)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export send_private_msg
//go:linkname _send_private_msg
func _send_private_msg(ptr uint32, size uint32) uint64

func (h api) SendPrivateMsg(ctx context.Context, request *MsgReq) (*SendReply, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _send_private_msg(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(SendReply)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export upload
//go:linkname _upload
func _upload(ptr uint32, size uint32) uint64

func (h api) Upload(ctx context.Context, request *UploadReq) (*UploadReply, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _upload(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(UploadReply)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export register_cron_job
//go:linkname _register_cron_job
func _register_cron_job(ptr uint32, size uint32) uint64

func (h api) RegisterCronJob(ctx context.Context, request *CronJob) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _register_cron_job(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export remove_cron_job
//go:linkname _remove_cron_job
func _remove_cron_job(ptr uint32, size uint32) uint64

func (h api) RemoveCronJob(ctx context.Context, request *CronJob) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _remove_cron_job(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasm-module env
//export remote_call
//go:linkname _remote_call
func _remote_call(ptr uint32, size uint32) uint64

func (h api) RemoteCall(ctx context.Context, request *RemoteCallReq) (*RemoteCallReply, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _remote_call(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(RemoteCallReply)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}
